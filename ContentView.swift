//
//  ContentView.swift
//  SwiftStudyTracker
//
//  Created by –ú–∏—Ö–∞–π–ª–æ –¢–∏—Ö–æ–Ω–æ–≤ on 02.08.2025.
//

import SwiftUI
import SwiftData

struct ContentView: View {
    @Environment(\.modelContext) var modelContext
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    @State private var selectedTag: Tag?
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç selectedTag
    @Query var entries: [StudyEntry]
    
    // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞
    @Query(sort: \Tag.name) var allTags: [Tag]
    
    @State private var showingAddScreen = false
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    // –û–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ `selectedTag` –±–ª–∞–≥–æ–¥–∞—Ä—è .id(selectedTag) –Ω–∏–∂–µ
    init(selectedTag: Tag? = nil) {
        // –ú—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ _selectedTag, –∞ –Ω–µ self.selectedTag, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
        _selectedTag = State(initialValue: selectedTag)
        
        let predicate: Predicate<StudyEntry>?
        
        if let tag = selectedTag {
            // –ï—Å–ª–∏ —Ç–µ–≥ –≤—ã–±—Ä–∞–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞—Ö–≤–∞—Ç–æ–º –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ `tag` –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏
            let tagID = tag.id
            
            // –ò–©–ï–ú –ü–û ID: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –º–∞—Å—Å–∏–≤ tags —ç–ª–µ–º–µ–Ω—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ id —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ tagID
            predicate = #Predicate<StudyEntry> { entry in
                entry.tags.contains { $0.id == tagID } // <--- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
            }
        } else {
            // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω (nil), –ø—Ä–µ–¥–∏–∫–∞—Ç —Ç–æ–∂–µ nil, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç "–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞"
            predicate = nil
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à @Query —Å –Ω—É–∂–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        _entries = Query(filter: predicate, sort: \.date, order: .reverse)
    }
    
    var body: some View {
        NavigationStack {
            Group {
                if entries.isEmpty {
                    ContentUnavailableView {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ñ–∏–ª—å—Ç—Ä
                        Label(selectedTag == nil ? "No entries yet" : "No entries for this tag", systemImage: "list.bullet.circle")
                    } description: {
                        Text(selectedTag == nil ? "Please add your first entry by tapping the plus button in the top right corner." : "Try selecting another tag or add a new entry with this tag.")
                    }
                } else {
                    List {
                        ForEach(entries) { entry in
                            NavigationLink(value: entry) {
                                HStack {
                                    VStack(alignment: .leading, spacing: 6) {
                                        Text(entry.topic)
                                            .font(.headline)
                                        Text(entry.source)
                                            .foregroundStyle(.secondary)
                                        
                                        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ –≤–∏–¥–µ "–ø–ª–∞—à–µ–∫"
                                        if !entry.tags.isEmpty {
                                            ScrollView(.horizontal, showsIndicators: false) {
                                                HStack {
                                                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                                                    ForEach(entry.tags.sorted { $0.name < $1.name }) { tag in
                                                        Text(tag.name)
                                                            .font(.caption2)
                                                            .padding(.horizontal, 8)
                                                            .padding(.vertical, 4)
                                                            .background(Color.accentColor.opacity(0.2))
                                                            .foregroundStyle(Color.accentColor)
                                                            .clipShape(Capsule())
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    Spacer()
                                    
                                    Text("\(entry.durationInMinutes) min")
                                        .foregroundStyle(.secondary)
                                }
                                .padding(.vertical, 4) // –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
                            }
                        }
                        .onDelete(perform: deleteEntries)
                    }
                }
            }
            .navigationTitle(selectedTag?.name.capitalized ?? "Study Entries üìö")
            .navigationDestination(for: StudyEntry.self) { entry in
                DetailEntryView(entry: entry)
            }
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    EditButton()
                }
                
                // –ú–µ–Ω—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º
                ToolbarItem(placement: .topBarLeading) {
                    Menu {
                        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
                        Button("Show All", action: { selectedTag = nil })
                        
                        if !allTags.isEmpty {
                            Divider()
                            ForEach(allTags) { tag in
                                Button(tag.name.capitalized, action: { selectedTag = tag })
                            }
                        }
                    } label: {
                        // –ò–∫–æ–Ω–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω
                        Image(systemName: selectedTag == nil ? "tag" : "tag.fill")
                    }
                }
                
                ToolbarItem(placement: .topBarTrailing) {
                    Button("Add new entry", systemImage: "plus") {
                        showingAddScreen.toggle()
                    }
                }
            }
            .sheet(isPresented: $showingAddScreen) {
                AddEntryView()
            }
        }
        // –≠—Ç–æ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç View –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedTag,
        // —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π init –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç @Query
        .id(selectedTag)
    }
    
    func deleteEntries(at offsets: IndexSet) {
        for offset in offsets {
            let entry = entries[offset]
            modelContext.delete(entry)
        }
    }
}

#Preview {
    ContentView()
        .modelContainer(for: [StudyEntry.self, Tag.self], inMemory: true)
}
